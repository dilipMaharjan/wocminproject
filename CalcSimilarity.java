import java.util.*;
import java.math.*;

public class CalcSimilarity {
  public static void main(String[] args) {
    new CalcSimilarity().test();
  }

  public void test()
  {
    MappedGlyph t = new MappedGlyph();
    t.setCharacter('t');
    t.setFeatureDescriptor(new int[] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,35,41,32,72,38,0,0,0,164,81,0,0,0,109,109,94,107,39,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,115,63,102,88,116,116,0,0,0,42,167,0,0,0,41,63,15,41,24,167,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,127,0,0,0,0,0,0,127,127,127,31,0,0,0,4,5,87,136,136,136,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,101,0,0,0,101,101,88,101,73,101,177,21,27,5,8,1,0,0,0,177,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,127,0,0,0,0,0,9,127,127,127,0,0,0,0,57,140,140,140,42,3,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,0,0,0,0,179,179,0,0,0,0,13,0,0,2,179,179,0,0,0,13,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,12,0,0,0,122,122,122,122,55,37,111,0,0,0,111,111,72,99,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,0,0,0,28,56,28,38,33,169,103,43,103,98,103,103,0,0,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,118,118,118,110,0,71,179,0,0,0,0,0,2,0,5,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});

    MappedGlyph f = new MappedGlyph();
    f.setCharacter('f');
    f.setFeatureDescriptor(new int[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,19,107,83,107,107,0,0,0,107,114,0,0,0,114,114,68,79,33,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,179,149,118,75,3,0,0,0,0,0,149,123,6,44,2,134,134,0,0,0,106,33,0,0,0,172,172,7,37,11,48,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,12,129,129,129,117,22,0,0,0,2,126,126,125,33,0,0,0,0,0,126,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,112,9,28,112,112,112,0,0,0,112,99,99,99,99,99,74,0,0,0,99,97,0,0,0,148,148,29,4,25,97,29,22,2,31,175,175,0,0,0,29,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,8,0,0,0,176,176,38,0,24,19,54,38,0,41,169,169,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,3,12,6,7,7,0,0,0,179,0,0,0,0,179,179,0,0,0,0,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});

    ArrayList<MappedGlyph> mapping = new ArrayList<MappedGlyph>();
    mapping.add(t);
    mapping.add(f);

    //contains same feature descriptor as MappedGlyph t above
    int[] image = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,35,41,32,72,38,0,0,0,164,81,0,0,0,109,109,94,107,39,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,115,63,102,88,116,116,0,0,0,42,167,0,0,0,41,63,15,41,24,167,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,127,0,0,0,0,0,0,127,127,127,31,0,0,0,4,5,87,136,136,136,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,101,0,0,0,101,101,88,101,73,101,177,21,27,5,8,1,0,0,0,177,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,127,0,0,0,0,0,9,127,127,127,0,0,0,0,57,140,140,140,42,3,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,0,0,0,0,179,179,0,0,0,0,13,0,0,2,179,179,0,0,0,13,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,12,0,0,0,122,122,122,122,55,37,111,0,0,0,111,111,72,99,0,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,179,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,0,0,0,28,56,28,38,33,169,103,43,103,98,103,103,0,0,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,118,118,118,110,0,71,179,0,0,0,0,0,2,0,5,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    char foundGlyph = findClosestGlyph(mapping, image);
    System.out.println("foundGlyph: " + foundGlyph);
  }

  private char findClosestGlyph(ArrayList<MappedGlyph> mapping, int[] featureDescriptor) {
    char mostSimilarGlyph = '\0';
    double mostSimilarRating = 0.0;

    //loop through glyphs in mapping and find the one with the largest similarity rating
    for (MappedGlyph glyph : mapping) {
      double similarity = calcSimilarity(glyph.getFeatureDescriptor(), featureDescriptor);
      if (similarity > mostSimilarRating) {
        mostSimilarRating = similarity;
        mostSimilarGlyph = glyph.getCharacter();
      }
    }

    return mostSimilarGlyph;
  }

  // Returns a percentage rating for similarity of the two given feature descriptors.
  // 100% means they are identical
  private double calcSimilarity(int[] image1, int[] image2)
  {
    //compute distance between two feature vectors
    int distanceSum = 0;
    for (int i = 0; i < 1000; i++) {
      distanceSum += Math.pow((image2[i] - image1[i]), 2);
    }
    double distance = Math.sqrt(distanceSum);

    //calculate dissimilarity as percentage
    final double MAX_DISTANCE = 8063.8;
    double distanceRating = distance / MAX_DISTANCE;

    //convert dissimilarity rating to similarity
    int similarityRating = 100 - (int) (distanceRating * 100);
    return similarityRating;
  }

  public class MappedGlyph {
    private int[] featureDescriptor;
    private char character;

    public int[] getFeatureDescriptor()
    {
      return featureDescriptor;
    }

    public char getCharacter()
    {
      return character;
    }

    public void setFeatureDescriptor(int[] featureDescriptor)
    {
      this.featureDescriptor = featureDescriptor;
    }

    public void setCharacter(char character)
    {
      this.character = character;
    }
  }

}
